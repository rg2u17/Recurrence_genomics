############################################
### 1. Get data ###########################

# This scripts assumes access to all 3 medical history data sources: Read codes, OPCS codes and ICD codes & top 10 genetic principal components - all can be derived from UKB data

# 1. Read codes:

recurrence_gp_data <- c(participant_id, date_clinical_code_was_entered, read_v2_code, ctv3_read_v3_code)

# 2. OPCS codes: 

recurrence_data_hesin_oper <- c(dnx_hesin_oper_id, participant_id, date_of_operation, instance_index, operative_procedures_opcs4, operative_procedures_opcs3)

# ICD codes:

recurrence_data_hesin_diag <- c(participant_id, diagnoses_icd10, diagnoses_icd9)
icd10_dates2 <- c(participant_id, age_at_recruitment, diagnoses_icd10, date_of_first_in_patient_diagnosis_icd10_array_0, ... ) # date_of_first_in_patient_diagnosis_icd10_array_0 should be extended to as many dates available
icd10_data_extra <- c(participant_id, diagnoses_main_icd10, date_of_first_in_patient_diagnosis_main_icd10_array_0, ...) # as above for date_of_first_in_patient_diagnosis_main_icd10_array_0
icd9_data <- c(participant_id, diagnoses_icd9, date_of_first_in_patient_diagnosis_icd9_array_0, ... , diagnoses_main_icd9, date_of_first_in_patient_diagnosis_main_icd9_array_0, ...) # date data to be extended to all available

# Genetic Principal components 

genotype_for_gwas <- c(participant_id,
                       genetic_principal_components_array_1,
                       genetic_principal_components_array_2,
                       genetic_principal_components_array_3,
                       genetic_principal_components_array_4,
                       genetic_principal_components_array_5,
                       genetic_principal_components_array_6,
                       genetic_principal_components_array_7,
                       genetic_principal_components_array_8,
                       genetic_principal_components_array_9,
                       genetic_principal_components_array_10,
                       missingness,
                       genotype_measurement_plate,
                       genotype_measurement_well,
                       genotype_measurement_batch,
                       genetic_sex      
)

############################################
### 2. Load R packages #####################

library(tidyverse)
library(janitor)
library(ggplot2)


############################################
### 3. Define lists of codes ###############

# Define lists of ReadV2/3 codes for stone diagnosis
stone_list_readv2_3 <- c("7B07.", #Percutaneous nephrolithotomy
                         "7B070", #Endoscopic ultrasound fragmentation of renal calculus
                         "7B071", #Nephroscopy and electrohydraulic lithotripsy of renal calculus
                         "7B072", #Endoscopic laser fragmentation of renal calculus
                         "7B073", #Percutaneous nephrolithotomy without disintegration
                         "7B074", #Endoscopic extraction of calculus of kidney nec
                         "7B07y", #Other specified percutaneous renal stone surgery
                         "7B07z", #Percutaneous renal stone surgery NOS
                         "7B0B.", #Extracorporeal shockwave lithotripsy for renal calculus
                         "7B0B0", #Extracorporeal shockwave lithotripsy for renal calculus of unspecified size
                         "7B0B1", #Extracorporeal shockwave lithotripsy for renal calculus less than 2 cm in diameter
                         "7B0B2", #Extracorporeal shockwave treatment for renal calculus of 2 cm or more in diameter
                         "7B0By", #Other specified extracorporeal shockwave lithotripsy for renal calculus
                         "7B0Bz", #Extracorporeal shockwave lithotripsy for renal calculus NOS
                         "7B170", #Nephroscopic laser fragmentation of ureteric calculus
                         "7B171", #Other nephroscopic fragmentation of ureteric calculus
                         "7B172", #Nephroscopic removal of ureteric calculus
                         "7B18.", #Ureteroscopic operations: [therapeutic] or [ureteric calculus]
                         "7B180", #Ureteroscopic laser fragmentation of ureteric calculus
                         "7B181", #Other ureteroscopic fragmentation of ureteric calculus
                         "7B182", #Ureteroscopic removal of ureteric calculus
                         "7B19.", #Cystoscopic operation for ureteric calculus
                         "7B190", #Cystoscopic laser lithotripsy of ureteric calculus
                         "7B191", #Other cystoscopic fragmentation of ureteric calculus
                         "7B193", #Cystoscopic catheter drainage for ureteric calculus
                         "7B194", #Cystoscopic dilatation of ureter for calculus
                         "7B19y", #Other specified cystoscopic removal of ureteric calculus
                         "7B19z", #Cystoscopic removal of ureteric calculus NOS
                         "7B1C.", #Extracorporeal shockwave lithotripsy of ureteric calculus
                         "7B1C0", #Extracorporeal shockwave lithotripsy of unspecified ureteric calculus
                         "7B1C1", #Extracorporeal shockwave lithotripsy for stone in upper ureter
                         "7B1C2", #Extracorporeal shockwave lithotripsy for stone in mid-ureter
                         "7B1C3", #Extracorporeal shockwave lithotripsy for stone in lower ureter
                         "7B1Cy", #Other specified extracorporeal shockwave lithotripsy of ureteric calculus
                         "7B1Cz", #Extracorporeal shockwave lithotripsy of ureteric calculus NOS
                         "Xa8bA", #Ureteroscopic extraction of ureteric calculus without disintegration
                         "Xa6m6", #Ureteroscopic operation for ureteric calculus
                         "Xa8P3", #Cystoscopic extraction of ureteric calculus without disintegration
                         "XE0G7", #Ureteroscopic removal of ureteric calculus
                         "XE0G8", #Cystoscopic extraction of ureteric calculus
                         "1A54.", #Ureteric: [colic (& C/O)] or [pain])
                         "4G6..", #O/E - ureteric calculus
                         "K112.", #Hydronephrosis with renal and ureteral calculous obstruction
                         "K121.", #Ureteric calculus
                         "K122.", #Calculus of kidney and ureter
                         "R080.", #[D]Renal colic
                         "R0800", #[D]Renal colic, unspecified
                         "R0801", #[D]Ureteric colic
                         "R080z", #[D]Renal colic NOS
                         "X30Ps",	#Steinstrasse
                         "XE2Pu", #Ureteric colic
                         "XM0CQ", #C/O - ureteric colic
                         "X30Pr"	#Calculus in pelviureteric junction
)

colic_list_readv2_3 <- c(
  "1A54.", #Ureteric: [colic (& C/O)] or [pain])
  "4G6..", #O/E - ureteric calculus
  "K112.", #Hydronephrosis with renal and ureteral calculous obstruction
  "K121.", #Ureteric calculus
  "K122.", #Calculus of kidney and ureter
  "R080.", #[D]Renal colic
  "R0800", #[D]Renal colic, unspecified
  "R0801", #[D]Ureteric colic
  "R080z", #[D]Renal colic NOS
  "X30Ps",	#Steinstrasse
  "XE2Pu", #Ureteric colic
  "XM0CQ", #C/O - ureteric colic
  "X30Pr"	#Calculus in pelviureteric junction
)

pcnl_list_readv2_3 <- c(
  "7B07.", #Percutaneous nephrolithotomy
  "7B070", #Endoscopic ultrasound fragmentation of renal calculus
  "7B071", #Nephroscopy and electrohydraulic lithotripsy of renal calculus
  "7B073", #Percutaneous nephrolithotomy without disintegration
  "7B07y", #Other specified percutaneous renal stone surgery
  "7B07z", #Percutaneous renal stone surgery NOS
  "7B170", #Nephroscopic laser fragmentation of ureteric calculus
  "7B171", #Other nephroscopic fragmentation of ureteric calculus
  "7B172" #Nephroscopic removal of ureteric calculus
)

urs_list_readv2_3 <- c(
  "7B072", #Endoscopic laser fragmentation of renal calculus
  "7B18.", #Ureteroscopic operations: [therapeutic] or [ureteric calculus]
  "7B180", #Ureteroscopic laser fragmentation of ureteric calculus
  "7B181", #Other ureteroscopic fragmentation of ureteric calculus
  "7B182", #Ureteroscopic removal of ureteric calculus
  "7B19.", #Cystoscopic operation for ureteric calculus
  "7B190", #Cystoscopic laser lithotripsy of ureteric calculus
  "7B191", #Other cystoscopic fragmentation of ureteric calculus
  "7B193", #Cystoscopic catheter drainage for ureteric calculus
  "7B194", #Cystoscopic dilatation of ureter for calculus
  "7B19y", #Other specified cystoscopic removal of ureteric calculus
  "7B19z", #Cystoscopic removal of ureteric calculus NOS
  "Xa8bA", #Ureteroscopic extraction of ureteric calculus without disintegration
  "Xa6m6", #Ureteroscopic operation for ureteric calculus
  "Xa8P3", #Cystoscopic extraction of ureteric calculus without disintegration
  "XE0G7", #Ureteroscopic removal of ureteric calculus
  "XE0G8" #Cystoscopic extraction of ureteric calculus
)

swl_list_readv2_3 <- c(
  "7B0B.", #Extracorporeal shockwave lithotripsy for renal calculus
  "7B0B0", #Extracorporeal shockwave lithotripsy for renal calculus of unspecified size
  "7B0B1", #Extracorporeal shockwave lithotripsy for renal calculus less than 2 cm in diameter
  "7B0B2", #Extracorporeal shockwave treatment for renal calculus of 2 cm or more in diameter
  "7B0By", #Other specified extracorporeal shockwave lithotripsy for renal calculus
  "7B0Bz", #Extracorporeal shockwave lithotripsy for renal calculus NOS
  "7B1C.", #Extracorporeal shockwave lithotripsy of ureteric calculus
  "7B1C0", #Extracorporeal shockwave lithotripsy of unspecified ureteric calculus
  "7B1C1", #Extracorporeal shockwave lithotripsy for stone in upper ureter
  "7B1C2", #Extracorporeal shockwave lithotripsy for stone in mid-ureter
  "7B1C3", #Extracorporeal shockwave lithotripsy for stone in lower ureter
  "7B1Cy", #Other specified extracorporeal shockwave lithotripsy of ureteric calculus
  "7B1Cz" #Extracorporeal shockwave lithotripsy of ureteric calculus NOS
)




# Define lists of OPCS(3/4) codes for drainage and stone procedures
## NB will need to correlate drainage with diagnosis of KSD rather than other ureteric obstruction
drainage_list_opcs3 <- c("561", #Nephrostomy and pyelostomy
                         "5611", #Nephrostomy and pyelostomy: drainage of kidney
                         "5612", #Nephrostomy and pyelostomy: drainage of renal pelvis
                         "5642", #Percutaneous puncture of kidney : other aspiration
                         "5871", #Cystoscopic operation on ureter : catheterisation of ureter, not otherwise stated	
                         "5875" #Cystoscopic operation on ureter : pyelography
)

drainage_list_opcs4 <- c(
  "M062", #Drainage of kidney NEC
  "M064", #Attention to nephrostomy tube NEC
  "M132", #Percutaneous drainage of kidney
  "M133", #Percutaneous aspiration of kidney NEC
  "M136", #Percutaneous insertion of nephrostomy tube
  "M264", #Nephroscopic insertion of tubal prosthesis into ureter
  "M274", #Ureteroscopic insertion of ureteric stent
  "M284", #Endoscopic catheter drainage of calculus of ureter
  "M292", #Endoscopic insertion of tubal prosthesis into ureter NEC
  "M302", #Endoscopic catheterisation of ureter
  "M33", #Percutaneous ureteric stent procedures
  "M331", #Percutaneous insertion of metallic stent into ureter
  "M332", #Percutaneous insertion of plastic stent into ureter
  "M335", #Percutaneous insertion of ureteric stent into ureter NEC
  "M338" #Other specified percutaneous ureteric stent procedures
)

intervention_list_opcs3 <- c("563", #Removal of renal calculus
                             "5631", #Removal of renal calculus : nephrolithotomy
                             "5632", #Removal of renal calculus : pyelolithotomy
                             "5633", #Removal of renal calculus : removal without incision
                             "580", #Ureterolithotomy
                             "5872" #Cystoscopic operation on ureter : lithotomy
)

pcnl_list_opcs3 <- c(
  "5631" #Removal of renal calculus : nephrolithotomy
)

urs_list_opcs3 <- c(
  "5633", #Removal of renal calculus : removal without incision
  "5872" #Cystoscopic operation on ureter : lithotomy
)

open_list_opcs3 <- c(
  "580", #Ureterolithotomy
  "563", #Removal of renal calculus
  "5632" #Removal of renal calculus : pyelolithotomy
)

intervention_list_opcs4 <- c(
  "M061", #Open removal of calculus from kidney
  #"M07", #Therapeutic ureteroscopic operations on kidney
  "M071", #Ureteroscopic laser fragmentation of calculus of kidney
  "M072", #Ureteroscopic extraction of calculus of kidney NEC
  #"M078", #Other specified therapeutic ureteroscopic operations on kidney
  #"M079", #Unspecified therapeutic ureteroscopic operations on kidney
  "M09", #Therapeutic endoscopic operations on calculus of kidney
  "M091", #Endoscopic ultrasound fragmentation of calculus of kidney
  "M092", #Endoscopic electrohydraulic shockwave fragmentation of calculus of kidney
  "M093", #Endoscopic laser fragmentation of calculus of kidney
  "M094", #Endoscopic extraction of calculus of kidney NEC
  "M098", #Other specified therapeutic endoscopic operations on calculus of kidney
  "M099", #Unspecified therapeutic endoscopic operations on calculus of kidney
  "M14", #Extracorporeal fragmentation of calculus of kidney
  "M141", #Extracorporeal shock wave lithotripsy of calculus of kidney
  "M148", #Other specified extracorporeal fragmentation of calculus of kidney
  "M149", #Unspecified extracorporeal fragmentation of calculus of kidney
  "M164", #Percutaneous nephrolithotomy NEC
  "M231", #Open ureterolithotomy	
  #"M26", #Therapeutic nephroscopic operations on ureter
  "M261", #Nephroscopic laser fragmentation of calculus of ureter
  "M262", #Nephroscopic fragmentation of calculus of ureter NEC
  "M263", #Nephroscopic extraction of calculus of ureter
  #"M268", #Other specified therapeutic nephroscopic operations on ureter
  #"M27", #Therapeutic ureteroscopic operations on ureter
  "M271", #Ureteroscopic laser fragmentation of calculus of ureter
  "M272", #Ureteroscopic fragmentation of calculus of ureter NEC
  "M273", #Ureteroscopic extraction of calculus of ureter
  "M28", #Other endoscopic removal of calculus from ureter
  "M281", #Endoscopic laser fragmentation of calculus of ureter NEC
  "M282", #Endoscopic fragmentation of calculus of ureter NEC
  "M283", #Endoscopic extraction of calculus of ureter NEC
  "M288", #Other specified other endoscopic removal of calculus from ureter
  "M289", #Unspecified other endoscopic removal of calculus from ureter
  "M31", #Extracorporeal fragmentation of calculus of ureter
  "M311", #Extracorporeal shockwave lithotripsy of calculus of ureter
  "M318", #Other specified extracorporeal fragmentation of calculus of ureter
  "M319" #Unspecified extracorporeal fragmentation of calculus of ureter
)

swl_list_opcs4 <- c(
  "M31", #Extracorporeal fragmentation of calculus of ureter
  "M311", #Extracorporeal shockwave lithotripsy of calculus of ureter
  "M318", #Other specified extracorporeal fragmentation of calculus of ureter
  "M319", #Unspecified extracorporeal fragmentation of calculus of ureter
  "M14", #Extracorporeal fragmentation of calculus of kidney
  "M141", #Extracorporeal shock wave lithotripsy of calculus of kidney
  "M148", #Other specified extracorporeal fragmentation of calculus of kidney
  "M149" #Unspecified extracorporeal fragmentation of calculus of kidney
  
)

pcnl_list_opcs4 <- c(
  "M091", #Endoscopic ultrasound fragmentation of calculus of kidney
  "M092", #Endoscopic electrohydraulic shockwave fragmentation of calculus of kidney
  "M093", #Endoscopic laser fragmentation of calculus of kidney
  "M094", #Endoscopic extraction of calculus of kidney NEC
  "M098", #Other specified therapeutic endoscopic operations on calculus of kidney
  "M099", #Unspecified therapeutic endoscopic operations on calculus of kidney
  "M09", #Therapeutic endoscopic operations on calculus of kidney
  "M164", #Percutaneous nephrolithotomy NEC
  "M261", #Nephroscopic laser fragmentation of calculus of ureter
  "M262", #Nephroscopic fragmentation of calculus of ureter NEC
  "M263" #Nephroscopic extraction of calculus of ureter
)

urs_list_opcs4 <- c(
  "M271", #Ureteroscopic laser fragmentation of calculus of ureter
  "M272", #Ureteroscopic fragmentation of calculus of ureter NEC
  "M273", #Ureteroscopic extraction of calculus of ureter
  "M28", #Other endoscopic removal of calculus from ureter
  "M281", #Endoscopic laser fragmentation of calculus of ureter NEC
  "M282", #Endoscopic fragmentation of calculus of ureter NEC
  "M283", #Endoscopic extraction of calculus of ureter NEC
  "M288", #Other specified other endoscopic removal of calculus from ureter
  "M289", #Unspecified other endoscopic removal of calculus from ureter
  "M071", #Ureteroscopic laser fragmentation of calculus of kidney
  "M072" #Ureteroscopic extraction of calculus of kidney NEC
)

open_list_opcs4 <- c(
  "M061", #Open removal of calculus from kidney
  "M231" #Open ureterolithotomy	
)

icd9_list_colic_intervention <- c("5501", #Nephrolithotomy
                                  "5503", #Percutaneous nephrostomy without fragmentation
                                  "5504", #Percutaneous nephrostomy with fragmentation
                                  #"5995", #Prolapsed urethral mucosa
                                  #"560", #removal of calculus without incision
                                  "562", #Ureterotomy for removal of calculus
                                  "592", #Calculus of kidney and ureter
                                  "5921" #Calculus of ureter
)

open_list_icd9 <- c(
  "562" #Ureterotomy for removal of calculus
)

pcnl_list_icd9 <- c(
  "5501", #Nephrolithotomy
  "5503", #Percutaneous nephrostomy without fragmentation
  "5504" #Percutaneous nephrostomy with fragmentation
)
colic_list_icd9 <- c(
  "592", #Calculus of kidney and ureter
  "5921" #Calculus of ureter
)

icd10_list_colic_intervention <- c(
  "N201", #Calculus of ureter
  "N202", #Calculus of kidney with calculus of ureter
  #"N23", #Unspecified renal colic
  "N132", #Hydronephrosis with renal and ureteral calculous obstruction
  "N20.1",
  "N20.2",
  "N13.2"
)

colic_list_icd10 <- c(
  "N201", #Calculus of ureter
  "N202", #Calculus of kidney with calculus of ureter
  #"N23", #Unspecified renal colic
  "N132" #Hydronephrosis with renal and ureteral calculous obstruction
)


############################################
### 4. Sort Read code data   ###############

# Get final date data for GP data
final_gp_date <- recurrence_gp_data %>% subset(select = c(participant_id,
                                                          date_clinical_code_was_entered)) 
final_gp_date <- final_gp_date %>% drop_na(date_clinical_code_was_entered)
final_gp_date$date_clinical_code_was_entered <- as.Date(final_gp_date$date_clinical_code_was_entered)
gp_last_dates <- final_gp_date %>%
  group_by(participant_id) %>%
  summarize(
    first_date = min(date_clinical_code_was_entered),
    last_date = max(date_clinical_code_was_entered)
  )

gp_last_dates <- gp_last_dates %>% mutate(follow_up = (last_date - first_date)/30)

# filter across recurrence_gp_data to find cases
recurrence_gp_data_1 <- recurrence_gp_data %>% mutate(
  stone_case = case_when(
    read_v2_code  %in% stone_list_readv2_3 | 
      ctv3_read_v3_code %in% stone_list_readv2_3 ~ 1,
    TRUE ~ 0),
  initial_code = case_when(
    read_v2_code %in% stone_list_readv2_3 ~ read_v2_code,
    ctv3_read_v3_code %in% stone_list_readv2_3 ~ ctv3_read_v3_code,
    TRUE ~ NA_character_
  )
)  
recurrence_gp_data_1 <- recurrence_gp_data_1 %>% filter(stone_case == 1) %>% subset(select = c(participant_id,
                                                                                               stone_case,
                                                                                               initial_code,
                                                                                               date_clinical_code_was_entered))

recurrence_gp_data_1$date_clinical_code_was_entered <- as.Date(recurrence_gp_data_1$date_clinical_code_was_entered)
recurrence_gp_data_1$stone_case <- as.factor(recurrence_gp_data_1$stone_case)
recurrence_gp_data_1 <- recurrence_gp_data_1 %>% drop_na(date_clinical_code_was_entered)

recurrence_gp_data_1 <- recurrence_gp_data_1 %>% mutate(
  initial_presentation = case_when(
    initial_code %in% pcnl_list_readv2_3 ~ "PCNL",
    initial_code %in% colic_list_readv2_3 ~ "Colic",
    initial_code %in% urs_list_readv2_3 ~ "URS",
    initial_code %in% swl_list_readv2_3 ~ "ESWL"
  )
)

# filter across recurrence_gp_data to find cases
#recurrence_gp_data_2 <- recurrence_gp_data %>% mutate(
#  stone_case = case_when(
#    ctv3_read_v3_code %in% stone_list_readv2_3 ~ 1,
#    TRUE ~ 0)
#) 

#recurrence_gp_data_2 <- recurrence_gp_data_2 %>% filter(stone_case == 1) %>% subset(select = c(participant_id,
#                                                                                             stone_case,
#                                                                                             date_clinical_code_was_entered))

############################################
### 5. Sort OPCS code data #################

recurrence_data_hesin_oper$date_of_operation <-
  as.Date(recurrence_data_hesin_oper$date_of_operation)

# Get final date data for OPCS data
recurrence_data_hesin_oper_final_date <- recurrence_data_hesin_oper %>% subset(select = c(participant_id,
                                                                                          date_of_operation)) 
recurrence_data_hesin_oper_final_date <- recurrence_data_hesin_oper_final_date %>% drop_na(date_of_operation)
recurrence_data_hesin_oper_final_date$date_of_operation <- as.Date(recurrence_data_hesin_oper_final_date$date_of_operation)
operation_last_dates <- recurrence_data_hesin_oper_final_date %>%
  group_by(participant_id) %>%
  summarize(
    first_date = min(date_of_operation),
    last_date = max(date_of_operation)
  )

operation_last_dates <- operation_last_dates %>% mutate(follow_up = (last_date - first_date)/30)

# Filter across recurrence_data_hesin_oper dataset to identify cases as above
recurrence_data_hesin_oper$operative_procedures_opcs3 <- as.character(recurrence_data_hesin_oper$operative_procedures_opcs3)

recurrence_data_hesin_oper1 <- recurrence_data_hesin_oper %>% mutate(
  drainage = case_when(
    operative_procedures_opcs3 %in% drainage_list_opcs3 | 
      operative_procedures_opcs4 %in% drainage_list_opcs4 ~ 1,
    TRUE ~ 0),
  definitive_intervention = case_when(
    operative_procedures_opcs3 %in% intervention_list_opcs3 | 
      operative_procedures_opcs4 %in% intervention_list_opcs4 ~ 1,
    TRUE ~ 0),
  initial_code_opcs3 = case_when(
    operative_procedures_opcs3 %in% intervention_list_opcs3 ~ operative_procedures_opcs3,
    TRUE ~ NA_character_),
  initial_code_opcs4 = case_when(
    operative_procedures_opcs4 %in% intervention_list_opcs4 ~ operative_procedures_opcs4,
    TRUE ~ NA_character_
  )
) 


stone_cases_intervention <- recurrence_data_hesin_oper1 %>% filter(definitive_intervention == 1) %>% subset(select = c(participant_id,
                                                                                                                       definitive_intervention,
                                                                                                                       initial_code_opcs3,
                                                                                                                       initial_code_opcs4,
                                                                                                                       date_of_operation))

stone_cases_intervention$date_of_operation <- as.Date(stone_cases_intervention$date_of_operation)
stone_cases_intervention$definitive_intervention <- as.factor(stone_cases_intervention$definitive_intervention)
stone_cases_intervention <- stone_cases_intervention %>% drop_na(date_of_operation)

stone_cases_intervention <- stone_cases_intervention %>% mutate(
  initial_presentation = case_when(
    initial_code_opcs3 %in% pcnl_list_opcs3 | 
      initial_code_opcs4 %in% pcnl_list_opcs4  ~ "PCNL",
    initial_code_opcs4 %in% swl_list_opcs4 ~ "ESWL",
    initial_code_opcs3 %in% urs_list_opcs3 | 
      initial_code_opcs4 %in% urs_list_opcs4  ~ "URS",
    initial_code_opcs3 %in% open_list_opcs3 | 
      initial_code_opcs4 %in% open_list_opcs4  ~ "Open"
  )
)

############################################
### 6. Sort ICD10 code data ################

# filter across recurrence_data_hesin_diag to find cases
icd_diagnoses <- recurrence_data_hesin_diag %>% mutate(
  stone_case = case_when(
    diagnoses_icd9 %in% icd9_list_colic_intervention |
      diagnoses_icd10 %in% icd10_list_colic_intervention ~ 1,
    TRUE ~ 0),
  initial_code = case_when(
    diagnoses_icd9 %in% icd9_list_colic_intervention ~ diagnoses_icd9,
    diagnoses_icd10 %in% icd10_list_colic_intervention ~ diagnoses_icd10,
    TRUE ~ NA_character_)
) 

icd_diagnoses <-
  icd_diagnoses %>% filter(stone_case == 1) %>% subset(select = c(participant_id,
                                                                  stone_case,
                                                                  initial_code))

icd_diagnoses$stone_case <- as.factor(icd_diagnoses$stone_case)
icd_diagnoses <- icd_diagnoses %>% distinct(participant_id,
                                            .keep_all = TRUE)
table(icd_diagnoses$stone_case)


# Get specific numbers associated with ICD9 and ICD10 codes
icd_diagnoses_2 <- recurrence_data_hesin_diag %>% mutate(
  "x7880" = case_when(diagnoses_icd9 == "7880" ~ 1, TRUE ~ 0), #n=274
  "x592" = case_when(diagnoses_icd9 == "592" ~ 1, TRUE ~ 0), #n=0
  "x5920"= case_when(diagnoses_icd9 == "5920" ~ 1, TRUE ~ 0), #n=164
  "x5920A" = case_when(diagnoses_icd9 == "5920A" ~ 1, TRUE ~ 0), #n=0
  "x5921" = case_when(diagnoses_icd9 == "5921" ~ 1, TRUE ~ 0), #n=167
  "x5929" = case_when(diagnoses_icd9 == "5929" ~ 1, TRUE ~ 0), #n=3
  "N20"= case_when(diagnoses_icd10 == "N20" ~ 1, TRUE ~ 0), #n=0
  "N200" = case_when(diagnoses_icd10 == "N200" ~ 1, TRUE ~ 0), #n=16227
  "N201" = case_when(diagnoses_icd10 == "N201" ~ 1, TRUE ~ 0), #n=7421
  "N202" = case_when(diagnoses_icd10 == "N202" ~ 1, TRUE ~ 0), #n=1114
  "N209" = case_when(diagnoses_icd10 == "N209" ~ 1, TRUE ~ 0), #n=257
  "N23" = case_when(diagnoses_icd10 == "N23" ~ 1, TRUE ~ 0) #n=3489
) 

# For ICD10 codes N20, N22 and N23 get date data
icd10_dates <- diet_data_participant %>% subset(select = c(participant_id,
                                                           date_n20_first_reported_calculus_of_kidney_and_ureter,
                                                           date_n22_first_reported_calculus_of_urinary_tract_in_diseases_classified_elsewhere,
                                                           date_n23_first_reported_unspecified_renal_colic)) %>% as_tibble()




# ICD 10 dates data
icd10_dates1 <- icd10_dates2 %>%
  mutate_at(vars(starts_with("date_of_first_in_patient_diagnosis_icd10_array_")), anydate)



icd10_dates4 <-
  icd10_dates2 %>% unite(
    icd_dates,
    starts_with("date_of_first_in_patient_diagnosis_icd10_array_"),
    sep = "|",
    remove = TRUE
  )

icd10_dates4_long <- icd10_dates4 %>%
  pivot_longer(cols = c(diagnoses_icd10, icd_dates),
               names_to = "variable",
               values_to = "value",
               names_prefix = "icd_") %>%
  separate_rows(value, sep = "\\|")

icd10_dates4_long <- icd10_dates4_long %>% subset(value != "NA")


icd10_dates4_long_dates <- icd10_dates4_long %>% subset(variable == "dates") %>% mutate(date_of_code = value,
                                                                                        .keep = "all") %>% select(
                                                                                          participant_id,
                                                                                          date_of_code
                                                                                        )
icd10_dates4_long_diagnoses <- icd10_dates4_long %>% subset(variable == "diagnoses_icd10") %>% mutate(diagnostic_code = value,
                                                                                                      .keep = "all") %>% select(
                                                                                                        participant_id,
                                                                                                        age_at_recruitment,
                                                                                                        diagnostic_code
                                                                                                      )
icd10_dates4_long2 <- full_join(
  icd10_dates4_long_diagnoses,
  icd10_dates4_long_dates,
  by = "participant_id"
)

icd10_dates4_long3 <- icd10_dates4_long2 %>% subset(select = c(participant_id,
                                                               diagnostic_code,
                                                               date_of_code))

# Define chunk size
chunk_size <- 10000  # Adjust this size depending on available memory

# Split the dataframe into chunks
total_rows <- nrow(icd10_dates4_long3)
num_chunks <- ceiling(total_rows / chunk_size)

# Initialize an empty list to store processed chunks
chunk_list <- list()

for (i in 1:num_chunks) {
  # Define start and end index for the current chunk
  start_row <- (i - 1) * chunk_size + 1
  end_row <- min(i * chunk_size, total_rows)
  
  # Extract the chunk
  chunk <- icd10_dates4_long3[start_row:end_row, ]
  
  # Process the chunk (separate diagnostic_code into icd_code and description)
  chunk_separated <- chunk %>%
    separate(
      diagnostic_code,
      into = c("icd_code", "description"),
      sep = " ",
      extra = "merge",
      fill = "right"
    )
  
  # Store the processed chunk in the list
  chunk_list[[i]] <- chunk_separated
  
  # Verbose readout
  cat("Processed chunk", i, "of", num_chunks, "\n")
}

# Combine the processed chunks back into a single dataframe
icd10_dates4_long3_separated <- bind_rows(chunk_list)

head(icd10_dates4_long3_separated)

icd10_dates4_long_stone_cases <- icd10_dates4_long3_separated %>%
  mutate(
    stone_case = case_when(icd_code %in%  icd10_list_colic_intervention ~ 1,
                           TRUE ~ 0
    ))
table(icd10_dates4_long_stone_cases$stone_case)

icd10_dates4_long_stone_cases1 <- icd10_dates4_long_stone_cases %>% subset(stone_case == 1)
table(icd10_dates4_long_stone_cases1$stone_case)

icd10_dates4_long_stone_cases1 <- icd10_dates4_long_stone_cases1 %>% 
  mutate(
    initial_presentation = ifelse(stone_case == TRUE,
                                  "Colic",
                                  NA
    )
  )

head(icd10_dates4_long_stone_cases1)

icd10_cases <- icd10_dates4_long_stone_cases1 %>% select(participant_id,
                                                         date_of_code,
                                                         stone_case,
                                                         initial_presentation) %>%
  pivot_wider(
    id_cols = participant_id, 
    names_from = stone_case, 
    values_from = date_of_code 
  ) 
colnames(icd10_cases) <- c("participant_id",
                           "icd10_date_list")

# Sort dates within each list in the intervention_list column
icd10_cases$icd10_date_list <-
  lapply(icd10_cases$icd10_date_list, function(dates) {
    sort(dates)
  })

# Get final date data for ICD10 dates data
final_icd10_date <- icd10_dates1 %>%
  rowwise() %>%
  mutate(
    first_date = min(c_across(starts_with("date_of_first_in_patient_diagnosis_icd10_array_")), na.rm = TRUE),
    last_date = max(c_across(starts_with("date_of_first_in_patient_diagnosis_icd10_array_")), na.rm = TRUE)
  ) %>%
  ungroup()

final_icd10_date <- final_icd10_date %>% mutate(follow_up = (last_date - first_date)/30)
final_icd10_date <- final_icd10_date %>% subset(select = c(participant_id,
                                                           first_date,
                                                           last_date,
                                                           follow_up))



# ICD10 Extra data
icd10_data_extra1 <- icd10_data_extra %>%
  mutate_at(vars(starts_with("date_of_first_in_patient_diagnosis_main_icd10_array_")), anydate)

icd10_data_extra2 <- icd10_data_extra1 %>%
  separate(col = diagnoses_main_icd10, 
           into = paste0("diagnosis_main_icd10_", 1:75), 
           sep = "\\|")

# Get final date data for ICD10 dates data
final_icd10_date_extra <- icd10_data_extra2 %>%
  rowwise() %>%
  mutate(
    first_date = min(c_across(starts_with("date_of_first_in_patient_diagnosis_main_icd10_array_")), na.rm = TRUE),
    last_date = max(c_across(starts_with("date_of_first_in_patient_diagnosis_main_icd10_array_")), na.rm = TRUE)
  ) %>%
  ungroup()

final_icd10_date_extra <- final_icd10_date_extra %>% mutate(follow_up = (last_date - first_date)/30)
final_icd10_date_extra <- final_icd10_date_extra %>% subset(select = c(participant_id,
                                                                       first_date,
                                                                       last_date,
                                                                       follow_up))


# ICD 10 dates extra  data
icd10_dates1 <- icd10_data_extra %>%
  mutate_at(vars(starts_with("date_of_first_in_patient_diagnosis_main_icd10_array_")), anydate)


icd10_dates_extra4 <-
  icd10_data_extra1 %>% unite(
    icd_dates,
    starts_with("date_of_first_in_patient_diagnosis_main_icd10_array_"),
    sep = "|",
    remove = TRUE
  )

icd10_dates4_extra_long <- icd10_dates_extra4 %>%
  pivot_longer(cols = c(diagnoses_main_icd10, icd_dates),
               names_to = "variable",
               values_to = "value",
               names_prefix = "icd_") %>%
  separate_rows(value, sep = "\\|")

icd10_dates4_extra_long <- icd10_dates4_extra_long %>% subset(value != "NA")


icd10_dates4_extra_long_dates <- icd10_dates4_extra_long %>% subset(variable == "dates") %>% mutate(date_of_code = value,
                                                                                                    .keep = "all")
icd10_dates4_extra_long_diagnoses <- icd10_dates4_extra_long %>% subset(variable == "diagnoses_icd10") %>% mutate(diagnostic_code = value,
                                                                                                                  .keep = "all")
icd10_dates4_extra_long2 <- merge(
  icd10_dates4_extra_long_diagnoses,
  icd10_dates4_extra_long_dates,
  by.x = "participant_id",
  by.y = "participant_id",
  all.x = TRUE,
  all.y = TRUE
)

icd10_dates4_extra_long3 <- icd10_dates4_extra_long2 %>% subset(select = c(participant_id,
                                                                           diagnostic_code,
                                                                           date_of_code))

###############################
# Define chunk size
chunk_size <- 10000  # Adjust this size depending on available memory

# Split the dataframe into chunks
total_rows <- nrow(icd10_dates4_extra_long3)
num_chunks <- ceiling(total_rows / chunk_size)

# Initialize an empty list to store processed chunks
chunk_list <- list()

for (i in 1:num_chunks) {
  # Define start and end index for the current chunk
  start_row <- (i - 1) * chunk_size + 1
  end_row <- min(i * chunk_size, total_rows)
  
  # Extract the chunk
  chunk <- icd10_dates4_long3[start_row:end_row, ]
  
  # Process the chunk (separate diagnostic_code into icd_code and description)
  chunk_separated <- chunk %>%
    separate(
      diagnostic_code,
      into = c("icd_code", "description"),
      sep = " ",
      extra = "merge",
      fill = "right"
    )
  
  # Store the processed chunk in the list
  chunk_list[[i]] <- chunk_separated
  
  # Verbose readout
  cat("Processed chunk", i, "of", num_chunks, "\n")
}

# Combine the processed chunks back into a single dataframe
icd10_dates4_extra_long3_separated <- bind_rows(chunk_list)

##############################

icd10_dates4_extra_long_stone_cases <- icd10_dates4_extra_long3_separated %>%
  mutate(
    stone_case = case_when(icd_code %in%  icd10_list_colic_intervention ~ 1,
                           TRUE ~ 0)
  )
table(icd10_dates4_extra_long_stone_cases$stone_case)

icd10_dates4_extra_long_stone_cases <- icd10_dates4_extra_long_stone_cases %>% mutate(
  initial_presentation = ifelse(stone_case == 1, "Colic", NA)
)

icd10_dates4_extra_long_stone_cases1 <- icd10_dates4_extra_long_stone_cases %>% subset(stone_case == 1)
table(icd10_dates4_extra_long_stone_cases1$stone_case)

icd10_extra_cases <- icd10_dates4_extra_long_stone_cases1 %>% 
  pivot_wider(
    id_cols = participant_id, 
    names_from = stone_case, 
    values_from = date_of_code 
  ) 
colnames(icd10_extra_cases) <- c("participant_id",
                                 "icd10_date_list")

# Sort dates within each list in the intervention_list column
icd10_extra_cases$icd10_date_list <-
  lapply(icd10_extra_cases$icd10_date_list, function(dates) {
    sort(dates)
  })


############################################
### 7. Sort ICD9 code data #################

icd9_dates1 <- icd9_data %>% subset(select = c(participant_id,
                                               diagnoses_icd9,
                                               date_of_first_in_patient_diagnosis_icd9_array_0,
                                               date_of_first_in_patient_diagnosis_icd9_array_1,
                                               date_of_first_in_patient_diagnosis_icd9_array_2,
                                               date_of_first_in_patient_diagnosis_icd9_array_3,
                                               date_of_first_in_patient_diagnosis_icd9_array_4,
                                               date_of_first_in_patient_diagnosis_icd9_array_5,
                                               date_of_first_in_patient_diagnosis_icd9_array_6,
                                               date_of_first_in_patient_diagnosis_icd9_array_7,
                                               date_of_first_in_patient_diagnosis_icd9_array_8,
                                               date_of_first_in_patient_diagnosis_icd9_array_9,
                                               date_of_first_in_patient_diagnosis_icd9_array_10,
                                               date_of_first_in_patient_diagnosis_icd9_array_11,
                                               date_of_first_in_patient_diagnosis_icd9_array_12,
                                               date_of_first_in_patient_diagnosis_icd9_array_13,
                                               date_of_first_in_patient_diagnosis_icd9_array_14,
                                               date_of_first_in_patient_diagnosis_icd9_array_15,
                                               date_of_first_in_patient_diagnosis_icd9_array_16,
                                               date_of_first_in_patient_diagnosis_icd9_array_17,
                                               date_of_first_in_patient_diagnosis_icd9_array_18,
                                               date_of_first_in_patient_diagnosis_icd9_array_19,
                                               date_of_first_in_patient_diagnosis_icd9_array_20,
                                               date_of_first_in_patient_diagnosis_icd9_array_21,
                                               date_of_first_in_patient_diagnosis_icd9_array_22,
                                               date_of_first_in_patient_diagnosis_icd9_array_23,
                                               date_of_first_in_patient_diagnosis_icd9_array_24,
                                               date_of_first_in_patient_diagnosis_icd9_array_25,
                                               date_of_first_in_patient_diagnosis_icd9_array_26,
                                               date_of_first_in_patient_diagnosis_icd9_array_27,
                                               date_of_first_in_patient_diagnosis_icd9_array_28,
                                               date_of_first_in_patient_diagnosis_icd9_array_29,
                                               date_of_first_in_patient_diagnosis_icd9_array_30,
                                               date_of_first_in_patient_diagnosis_icd9_array_31,
                                               date_of_first_in_patient_diagnosis_icd9_array_32,
                                               date_of_first_in_patient_diagnosis_icd9_array_33,
                                               date_of_first_in_patient_diagnosis_icd9_array_34,
                                               date_of_first_in_patient_diagnosis_icd9_array_35,
                                               date_of_first_in_patient_diagnosis_icd9_array_36,
                                               date_of_first_in_patient_diagnosis_icd9_array_37,
                                               date_of_first_in_patient_diagnosis_icd9_array_38,
                                               date_of_first_in_patient_diagnosis_icd9_array_39,
                                               date_of_first_in_patient_diagnosis_icd9_array_40,
                                               date_of_first_in_patient_diagnosis_icd9_array_41,
                                               date_of_first_in_patient_diagnosis_icd9_array_42,
                                               date_of_first_in_patient_diagnosis_icd9_array_43,
                                               date_of_first_in_patient_diagnosis_icd9_array_44,
                                               date_of_first_in_patient_diagnosis_icd9_array_45,
                                               date_of_first_in_patient_diagnosis_icd9_array_46)) %>% as_tibble()

icd9_data_extra <- icd9_data %>% subset(select = c(participant_id,
                                                   diagnoses_main_icd9,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_0,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_1,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_2,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_3,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_4,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_5,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_6,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_7,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_8,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_9,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_10,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_11,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_12,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_13,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_14,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_15,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_16,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_17,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_18,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_19,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_20,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_21,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_22,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_23,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_24,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_25,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_26,
                                                   date_of_first_in_patient_diagnosis_main_icd9_array_27)) %>% as_tibble()

# ICD 9 dates data
icd9_dates2 <- icd9_dates1 %>%
  mutate_at(vars(starts_with("date_of_first_in_patient_diagnosis_icd9_array_")), anydate)

icd9_dates1<- icd9_dates2 %>%
  separate(col = diagnoses_icd9, 
           into = paste0("diagnosis_icd9_", 1:47), 
           sep = "\\|")

# Get final date data for ICD9 dates data
final_icd9_date <- icd9_dates1 %>%
  rowwise() %>%
  mutate(
    first_date = min(c_across(starts_with("date_of_first_in_patient_diagnosis_icd9_array_")), na.rm = TRUE),
    last_date = max(c_across(starts_with("date_of_first_in_patient_diagnosis_icd9_array_")), na.rm = TRUE)
  ) %>%
  ungroup()

final_icd9_date <- final_icd9_date %>% mutate(follow_up = (last_date - first_date)/30)
final_icd9_date <- final_icd9_date %>% subset(select = c(participant_id,
                                                         first_date,
                                                         last_date,
                                                         follow_up))

# ICD 9 dates data
icd9_dates4 <-
  icd9_dates2 %>% unite(
    icd_dates,
    starts_with("date_of_first_in_patient_diagnosis_icd9_array_"),
    sep = "|",
    remove = TRUE
  )

icd9_dates4_long <- icd9_dates4 %>%
  pivot_longer(cols = c(diagnoses_icd9, icd_dates),
               names_to = "variable",
               values_to = "value",
               names_prefix = "icd_") %>%
  separate_rows(value, sep = "\\|")

icd9_dates4_long <- icd9_dates4_long %>% subset(value != "NA")


icd9_dates4_long_dates <- icd9_dates4_long %>% subset(variable == "dates") %>% mutate(date_of_code = value,
                                                                                      .keep = "all")
icd9_dates4_long_diagnoses <- icd9_dates4_long %>% subset(variable == "diagnoses_icd9") %>% mutate(diagnostic_code = value,
                                                                                                   .keep = "all")
icd9_dates4_long2 <- merge(
  icd9_dates4_long_diagnoses,
  icd9_dates4_long_dates,
  by.x = "participant_id",
  by.y = "participant_id",
  all.x = TRUE,
  all.y = TRUE
)

icd9_dates4_long3 <- icd9_dates4_long2 %>% subset(select = c(participant_id,
                                                             diagnostic_code,
                                                             date_of_code))


###############################
# Define chunk size
chunk_size <- 10000  # Adjust this size depending on available memory

# Split the dataframe into chunks
total_rows <- nrow(icd9_dates4_long3)
num_chunks <- ceiling(total_rows / chunk_size)

# Initialize an empty list to store processed chunks
chunk_list <- list()

for (i in 1:num_chunks) {
  # Define start and end index for the current chunk
  start_row <- (i - 1) * chunk_size + 1
  end_row <- min(i * chunk_size, total_rows)
  
  # Extract the chunk
  chunk <- icd9_dates4_long3[start_row:end_row, ]
  
  # Process the chunk (separate diagnostic_code into icd_code and description)
  chunk_separated <- chunk %>%
    separate(
      diagnostic_code,
      into = c("icd_code", "description"),
      sep = " ",
      extra = "merge",
      fill = "right"
    )
  
  # Store the processed chunk in the list
  chunk_list[[i]] <- chunk_separated
  
  # Verbose readout
  cat("Processed chunk", i, "of", num_chunks, "\n")
}

# Combine the processed chunks back into a single dataframe
icd9_dates4_long3_separated <- bind_rows(chunk_list)

##############################

icd9_dates4_long_stone_cases <- icd9_dates4_long3_separated %>%
  mutate(
    stone_case = case_when(icd_code %in%  icd9_list_colic_intervention ~ 1,
                           TRUE ~ 0)
  )
table(icd9_dates4_long_stone_cases$stone_case)

icd9_dates4_long_stone_cases1 <- icd9_dates4_long_stone_cases %>% subset(stone_case == 1)
table(icd9_dates4_long_stone_cases1$stone_case)

icd9_dates4_long_stone_cases1 <- icd9_dates4_long_stone_cases1 %>% mutate(
  initial_presentation = case_when(
    icd_code %in% pcnl_list_icd9 ~ "PCNL",
    icd_code %in% open_list_icd9  ~ "Open",
    icd_code %in% colic_list_icd9  ~ "Colic"
  )
)

icd9_cases <- icd9_dates4_long_stone_cases1 %>% 
  pivot_wider(
    id_cols = participant_id, 
    names_from = stone_case, 
    values_from = date_of_code 
  ) 
colnames(icd9_cases) <- c("participant_id",
                          "icd9_date_list")

table(nrow(icd9_cases))

# Sort dates within each list in the intervention_list column
icd9_cases$icd9_date_list <-
  lapply(icd9_cases$icd9_date_list, function(dates) {
    sort(dates)
  })

#Extra ICD9 data

icd9_data_extra1 <- icd9_data_extra %>%
  mutate_at(vars(starts_with("date_of_first_in_patient_diagnosis_main_icd9_array_")), anydate)

# Get final date data for ICD10 dates data
final_icd9_date_extra <- icd9_data_extra1 %>%
  rowwise() %>%
  mutate(
    first_date = min(c_across(starts_with("date_of_first_in_patient_diagnosis_main_icd9_array_")), na.rm = TRUE),
    last_date = max(c_across(starts_with("date_of_first_in_patient_diagnosis_main_icd9_array_")), na.rm = TRUE)
  ) %>%
  ungroup()

final_icd9_date_extra <- final_icd9_date_extra %>% mutate(follow_up = (last_date - first_date)/30)
final_icd9_date_extra <- final_icd9_date_extra %>% subset(select = c(participant_id,
                                                                     first_date,
                                                                     last_date,
                                                                     follow_up))

# ICD 9 dates data
icd9_dates4_extra <-
  icd9_data_extra1 %>% unite(
    icd_dates,
    starts_with("date_of_first_in_patient_diagnosis_main_icd9_array_"),
    sep = "|",
    remove = TRUE
  )

icd9_dates4_extra_long <- icd9_dates4_extra %>%
  pivot_longer(cols = c(diagnoses_main_icd9, icd_dates),
               names_to = "variable",
               values_to = "value",
               names_prefix = "icd_") %>%
  separate_rows(value, sep = "\\|")

icd9_dates4_extra_long <- icd9_dates4_extra_long %>% subset(value != "NA")


icd9_dates4_extra_long_dates <- icd9_dates4_extra_long %>% subset(variable == "dates") %>% mutate(date_of_code = value,
                                                                                                  .keep = "all")
icd9_dates4_extra_long_diagnoses <- icd9_dates4_extra_long %>% subset(variable == "diagnoses_icd9") %>% mutate(diagnostic_code = value,
                                                                                                               .keep = "all")
icd9_dates4_extra_long2 <- merge(
  icd9_dates4_extra_long_diagnoses,
  icd9_dates4_extra_long_dates,
  by.x = "participant_id",
  by.y = "participant_id",
  all.x = TRUE,
  all.y = TRUE
)

icd9_dates4_extra_long3 <- icd9_dates4_extra_long2 %>% subset(select = c(participant_id,
                                                                         diagnostic_code,
                                                                         date_of_code))

###############################
# Define chunk size
chunk_size <- 10000  # Adjust this size depending on available memory

# Split the dataframe into chunks
total_rows <- nrow(icd9_dates4_long3)
num_chunks <- ceiling(total_rows / chunk_size)

# Initialize an empty list to store processed chunks
chunk_list <- list()

for (i in 1:num_chunks) {
  # Define start and end index for the current chunk
  start_row <- (i - 1) * chunk_size + 1
  end_row <- min(i * chunk_size, total_rows)
  
  # Extract the chunk
  chunk <- icd9_dates4_extra_long3[start_row:end_row, ]
  
  # Process the chunk (separate diagnostic_code into icd_code and description)
  chunk_separated <- chunk %>%
    separate(
      diagnostic_code,
      into = c("icd_code", "description"),
      sep = " ",
      extra = "merge",
      fill = "right"
    )
  
  # Store the processed chunk in the list
  chunk_list[[i]] <- chunk_separated
  
  # Verbose readout
  cat("Processed chunk", i, "of", num_chunks, "\n")
}

# Combine the processed chunks back into a single dataframe
icd9_dates4_extra_long3_separated <- bind_rows(chunk_list)

##############################

icd9_dates4_extra_long_stone_cases <- icd9_dates4_extra_long3_separated %>%
  mutate(
    stone_case = case_when(icd_code %in%  icd9_list_colic_intervention ~ 1,
                           TRUE ~ 0)
  )
table(icd9_dates4_extra_long_stone_cases$stone_case)

icd9_dates4_extra_long_stone_cases1 <- icd9_dates4_extra_long_stone_cases %>% subset(stone_case == 1)
table(icd9_dates4_extra_long_stone_cases1$stone_case)

icd9_dates4_extra_long_stone_cases1 <- icd9_dates4_extra_long_stone_cases1 %>% mutate(
  initial_presentation = case_when(
    icd_code %in% pcnl_list_icd9 ~ "PCNL",
    icd_code %in% open_list_icd9  ~ "Open",
    icd_code %in% colic_list_icd9  ~ "Colic"
  )
)



############################################
### 8. Sort final dataset ##################

# Get date data
participant_id_list <-
  cbind(
    participant_id = c(
      gp_last_dates$participant_id,
      operation_last_dates$participant_id,
      final_icd10_date$participant_id,
      final_icd10_date_extra$participant_id,
      final_icd9_date$participant_id,
      final_icd9_date_extra$participant_id
    ),
    first_date = as.Date(c(
      gp_last_dates$first_date,
      operation_last_dates$first_date,
      final_icd10_date$first_date,
      final_icd10_date_extra$first_date,
      final_icd9_date$first_date,
      final_icd9_date_extra$first_date
    )),
    last_date = as.Date(c(
      gp_last_dates$last_date,
      operation_last_dates$last_date,
      final_icd10_date$last_date,
      final_icd10_date_extra$last_date,
      final_icd9_date$last_date,
      final_icd9_date_extra$last_date
    ))
  ) %>% as_tibble()

participant_ids <- participant_id_list %>% distinct(participant_id)
participant_id_list$first_date <- as.Date(participant_id_list$first_date)
participant_id_list$last_date <- as.Date(participant_id_list$last_date)

overall_follow_up <-
  participant_id_list %>% group_by(participant_id) %>% summarise(first_date = min(first_date),
                                                                 last_date = max(last_date)) %>% mutate(follow_up = last_date - first_date)

overall_follow_up$follow_up <- as.numeric(overall_follow_up$follow_up, units = "days")
hist(overall_follow_up$follow_up) 

#####
## Time to event data

icd10_dates4_long_stone_cases2 <- icd10_dates4_long_stone_cases1 %>% subset(select = c(participant_id,
                                                                                       stone_case,
                                                                                       initial_presentation,
                                                                                       date_of_code))

icd10_dates4_extra_long_stone_cases2 <- icd10_dates4_extra_long_stone_cases1 %>% subset(select = c(participant_id,
                                                                                                   stone_case,
                                                                                                   initial_presentation,
                                                                                                   date_of_code))

icd9_dates4_long_stone_cases2 <- icd9_dates4_long_stone_cases1 %>% subset(select = c(participant_id,
                                                                                     stone_case,
                                                                                     initial_presentation,
                                                                                     date_of_code))

icd9_dates4_extra_long_stone_cases2 <- icd9_dates4_extra_long_stone_cases1 %>% subset(select = c(participant_id,
                                                                                                 stone_case,
                                                                                                 initial_presentation,
                                                                                                 date_of_code))

icd10_dates4_long_stone_cases2$stone_case <- as.integer(as.factor(icd10_dates4_long_stone_cases2$stone_case))
icd10_dates4_long_stone_cases2$date_of_code <- as.Date(icd10_dates4_long_stone_cases2$date_of_code)

icd10_dates4_extra_long_stone_cases2$stone_case <- as.integer(as.factor(icd10_dates4_extra_long_stone_cases2$stone_case))
icd10_dates4_extra_long_stone_cases2$date_of_code <- as.Date(icd10_dates4_extra_long_stone_cases2$date_of_code)

icd9_dates4_long_stone_cases2$stone_case <- as.integer(as.factor(icd9_dates4_long_stone_cases2$stone_case))
icd9_dates4_long_stone_cases2$date_of_code <- as.Date(icd9_dates4_long_stone_cases2$date_of_code)

icd9_dates4_extra_long_stone_cases2$stone_case <- as.integer(as.factor(icd9_dates4_extra_long_stone_cases2$stone_case))
icd9_dates4_extra_long_stone_cases2$date_of_code <- as.Date(icd9_dates4_extra_long_stone_cases2$date_of_code)

stone_cases_intervention <- stone_cases_intervention %>% rename(
  stone_case = definitive_intervention,
  date_of_code = date_of_operation
) %>% select(participant_id,
             stone_case,
             initial_presentation,
             date_of_code)

recurrence_gp_data_1 <- recurrence_gp_data_1 %>% rename(
  date_of_code = date_clinical_code_was_entered
) %>% select(participant_id,
             stone_case,
             initial_presentation,
             date_of_code)

#recurrence_gp_data_2 <- recurrence_gp_data_2 %>% rename(
#  date_of_code = date_clinical_code_was_entered
#)

overall_data <- rbind(recurrence_gp_data_1,
                      #recurrence_gp_data_2,
                      stone_cases_intervention,
                      icd10_dates4_long_stone_cases2,
                      icd10_dates4_extra_long_stone_cases2,
                      icd9_dates4_long_stone_cases2,
                      icd9_dates4_extra_long_stone_cases2
) %>% arrange(date_of_code)

###############################################
### 9. Add age at first stone #################

# Mutate age_at_first_stone
  overall_data <- overall_data %>% mutate(age_at_first_stone = (time_0 - dob)/365,
                          .keep = "unused")
  overall_data$age_at_first_stone <- round(as.numeric(overall_data$age_at_first_stone),
                                   digits = 0)


###############################################
### 10. Explore final dataset ##################

n <- overall_data %>%
  group_by(participant_id) %>%                         # Group by participant_id
  arrange(date_of_code) %>%                            # Arrange each group by date_of_code
  filter(!(
    format(date_of_code, "%m-%d") == "01-01" &           # Remove dates that are 1st January & prior to year 2000 given GP coding less accurate prior to this
      format(date_of_code, "%Y") < 2000 &
      n() > 1
  )) %>% 
  mutate(date_diff = as.numeric(difftime(date_of_code, lag(date_of_code), units = "days"))) %>%        # Calculate the difference between successive dates
  summarise(count_diff = sum(date_diff > (365 / 2), na.rm = TRUE)) %>%                                # Count where the difference is more than 6 months
  ungroup()                                                              

# To get the count table
count_table <- table(n$count_diff)
count_table

ggplot(n, aes(x = count_diff)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust 'binwidth' as needed
  labs(title = "Histogram of Number of Symptomatic Recurrences (>6 months apart)", x = "Number of Symptomatic Recurrences", y = "Frequency") +
  theme_minimal()  # Use a minimal theme for better aesthetics


############################
raw_n <- overall_data %>%
  group_by(participant_id) %>%                 
  summarise(count_diff = n(), .groups = "drop")                                         

###########################

colic_to_colic_3_events_all <- n %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 2,
                 1,
                 0)
) %>% subset(select = c(FID,
                        IID,
                        pheno))

colic_to_colic_3_events_ssf <- n %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 2,
                 1,
                 ifelse(count_diff == 0,
                        0,
                        NA))
) %>% drop_na(pheno) %>% subset(select = c(FID,
                                           IID,
                                           pheno))

###########################

colic_to_colic_4_events_all <- n %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 3,
                 1,
                 0)
) %>% subset(select = c(FID,
                        IID,
                        pheno))
  
colic_to_colic_4_events_ssf <- n %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 3,
                 1,
                 ifelse(count_diff == 0,
                        0,
                        NA))
) %>% drop_na(pheno) %>% subset(select = c(FID,
                                           IID,
                                           pheno))

###############################################
### 11. Create Quantitative phenotype dataset ##

colic_to_colic_all_quant_pheno <- n %>% mutate(FID = participant_id,
                                               IID = participant_id,
                                               pheno = count_diff) %>% drop_na(pheno) %>% subset(select = c(FID,
                                                                                                            IID,
                                                                                                            pheno))


#Write .txt files for pheno files


# Transform Data
## Examine skew
hist(colic_to_colic_all_quant_pheno$pheno)

## SQRT
hist(sqrt(colic_to_colic_all_quant_pheno$pheno))

## Natural Log 
hist(log(colic_to_colic_all_quant_pheno$pheno))


## Log 10
hist(log10(colic_to_colic_all_quant_pheno$pheno))


## Inverse
hist(1/log10(colic_to_colic_all_quant_pheno$pheno))


## Yeo-Johnson Transformation (Extension of Box-Cox transformation that handles 0 + negative values)
library(bestNormalize)
yeo_johnson_trans <- yeojohnson(colic_to_colic_all_quant_pheno$pheno)
colic_to_colic_all_quant_pheno$pheno_transformed <- predict(yeo_johnson_trans)
hist(colic_to_colic_all_quant_pheno$pheno_transformed)

###############################################
### 12. Create 5 year recurrence dataset #####

last_date <- overall_follow_up %>% subset(select = c(participant_id,
                                                     last_date))
library(dplyr)

overall_data_cut_off_5 <- overall_data %>%  
  group_by(participant_id) %>%  
  arrange(date_of_code) %>%  
  mutate(
    date_diff = as.numeric(difftime(date_of_code, lag(date_of_code), units = "days")),
    first_date = first(date_of_code)  # Capture the first date
  ) %>%  
  summarise(
    count_diff = sum(date_diff > (365 / 2) & (date_of_code - first_date <= (365 * 5)), na.rm = TRUE),  # Count recurrences
    first_date = first(first_date),  # Ensure to keep first date
    .groups = 'drop'  # Drop grouping after summarising
  ) %>%  
  left_join(last_date, by = "participant_id") 

overall_data_cut_off_5 <- overall_data_cut_off_5 %>% drop_na(last_date)%>%  
  filter(
    (count_diff == 0 & difftime(last_date, first_date, units = "days") > (365 * 5)) | count_diff > 0
  )

# Display the table of recurrence counts
table(overall_data_cut_off_5$count_diff)



# Make pheno file for >/= 2 recurrences 
colic_to_colic_3_events_all_5yr <- overall_data_cut_off_5 %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 1,
                 1,
                 0)
) %>% subset(select = c(FID,
                        IID,
                        pheno))

colic_to_colic_3_events_all_5yr_ssf <- overall_data_cut_off_5 %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 2,
                 1,
                 ifelse(count_diff == 0,
                        0,
                        NA))
) %>% drop_na(pheno) %>% subset(select = c(FID,
                                           IID,
                                           pheno))




###############################################
### 13. Create 10 year recurrence dataset #####

overall_data_cut_off_10 <- overall_data %>%  
  group_by(participant_id) %>%  
  arrange(date_of_code) %>%  
  mutate(
    date_diff = as.numeric(difftime(date_of_code, lag(date_of_code), units = "days")),
    first_date = first(date_of_code)  # Capture the first date
  ) %>%  
  summarise(
    count_diff = sum(date_diff > (365 / 2) & (date_of_code - first_date <= (365 * 10)), na.rm = TRUE),  # Count recurrences
    first_date = first(first_date),  # Ensure to keep first date
    .groups = 'drop'  # Drop grouping after summarising
  ) %>%  
  left_join(last_date, by = "participant_id") 

overall_data_cut_off_10 <- overall_data_cut_off_10 %>% drop_na(last_date) %>%  
  filter(
    (count_diff == 0 & difftime(last_date, first_date, units = "days") > (365 * 10)) | count_diff > 0
  )

# Display the table of recurrence counts
table(overall_data_cut_off_5$count_diff)

# Make pheno file for >/= 2 recurrences 
colic_to_colic_3_events_all_10yr <- overall_data_cut_off_10 %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 2,
                 1,
                 0)
) %>% subset(select = c(FID,
                        IID,
                        pheno))

colic_to_colic_3_events_all_10yr_ssf <- overall_data_cut_off_10 %>% mutate(
  FID = participant_id,
  IID = participant_id,
  pheno = ifelse(count_diff > 2,
                 1,
                 ifelse(count_diff == 0,
                        0,
                        NA))
) %>% drop_na(pheno) %>% subset(select = c(FID,
                                           IID,
                                           pheno))



###############################################
### 14. Create 5/10 yr recurrence (symptomatic episodes only) pheno files for GWAS 

pheno_file_5yr_colic_to_colic <-
  gp_cases_colic_reintervention_initial_and_subsequent %>%
  select(participant_id,
         pheno_less5) %>% rename(IID = participant_id, pheno = pheno_less5) %>% drop_na(pheno)

pheno_file_5yr_colic_to_colic$pheno <-
  as.factor(pheno_file_5yr_colic_to_colic$pheno)

pheno_file_5yr_colic_to_colic$pheno <-
  recode_factor(pheno_file_5yr_colic_to_colic$pheno,
                "ssf" = 0,
                "rsf" = 1)  %>% as.integer()
pheno_file_5yr_colic_to_colic <- pheno_file_5yr_colic_to_colic %>%
  mutate(pheno = ifelse(pheno == 1,
                        0,
                        ifelse(pheno == 2,
                               1,
                               pheno)))



pheno_file_5yr_colic_to_colic2 <- merge(
  pheno_file_5yr_colic_to_colic,
  genotype_for_gwas,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

pheno_file_5yr_colic_to_colic2 <- merge(
  pheno_file_5yr_colic_to_colic2,
  age_IID2,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

pheno_file_5yr_colic_to_colic2 <-
  pheno_file_5yr_colic_to_colic2 %>% subset(missingness < 0.02)

pheno_file_5yr_colic_to_colic2 <-
  pheno_file_5yr_colic_to_colic2 %>% mutate(FID = IID,
                                       sex = genetic_sex,
                                       .keep = "all")

pheno_file_5yr_colic_to_colic2 <-
  pheno_file_5yr_colic_to_colic2 %>% select(FID,
                                       IID,
                                       everything()) %>% subset(select = -c(
                                         genotype_measurement_plate,
                                         genotype_measurement_well,
                                         genetic_sex
                                       ))

pheno_file_10yr_colic_to_colic <-
  gp_cases_colic_reintervention_initial_and_subsequent  %>% 
    select(
      participant_id,
      pheno_less10
  ) %>% rename(IID = participant_id, pheno = pheno_less10) %>% drop_na(pheno)

pheno_file_10yr_colic_to_colic$pheno <-
  as.factor(pheno_file_10yr_colic_to_colic$pheno)

pheno_file_10yr_colic_to_colic$pheno <-
  recode_factor(pheno_file_10yr_colic_to_colic$pheno,
                "ssf" = 0,
                "rsf" = 1)  %>% as.integer()
pheno_file_10yr_colic_to_colic <- pheno_file_10yr_colic_to_colic %>%
  mutate(pheno = ifelse(pheno == 1,
                        0,
                        ifelse(pheno == 2,
                               1,
                               pheno)))



pheno_file_10yr_colic_to_colic2 <- merge(
  pheno_file_10yr_colic_to_colic,
  genotype_for_gwas,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

pheno_file_10yr_colic_to_colic2 <- merge(
  pheno_file_10yr_colic_to_colic2,
  age_IID2,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

pheno_file_10yr_colic_to_colic2 <-
  pheno_file_10yr_colic_to_colic2 %>% subset(missingness < 0.02)

pheno_file_10yr_colic_to_colic2 <-
  pheno_file_10yr_colic_to_colic2 %>% mutate(FID = IID,
                                       sex = genetic_sex,
                                       .keep = "all")

pheno_file_10yr_colic_to_colic2 <-
  pheno_file_10yr_colic_to_colic2 %>% select(FID,
                                       IID,
                                       everything()) %>% subset(select = -c(
                                         genotype_measurement_plate,
                                         genotype_measurement_well,
                                         genetic_sex
                                       ))

pheno_file_5yr_colic_to_colic2_sample <-
  sample(1:nrow(na.omit(pheno_file_5yr_colic_to_colic2)),
         size = nrow(na.omit(pheno_file_5yr_colic_to_colic2)) * 0.8)

pheno_file_5yr_colic_to_colic2_train <-
  na.omit(pheno_file_5yr_colic_to_colic2)[pheno_file_5yr_colic_to_colic2_sample, ]
pheno_file_5yr_colic_to_colic2_test <-
  na.omit(pheno_file_5yr_colic_to_colic2)[-pheno_file_5yr_colic_to_colic2_sample, ]

pheno_file_10yr_colic_to_colic2_sample <-
  sample(1:nrow(na.omit(pheno_file_10yr_colic_to_colic2)),
         size = nrow(na.omit(pheno_file_10yr_colic_to_colic2)) * 0.8)

pheno_file_10yr_colic_to_colic2_train <-
  na.omit(pheno_file_10yr_colic_to_colic2)[pheno_file_10yr_colic_to_colic2_sample, ]
pheno_file_10yr_colic_to_colic2_test <-
  na.omit(pheno_file_10yr_colic_to_colic2)[-pheno_file_10yr_colic_to_colic2_sample, ]


write.table(
  pheno_file_5yr_colic_to_colic2,
  "~/Desktop/pheno_file_5yr_colic_to_colic2_all.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  pheno_file_5yr_colic_to_colic2_train,
  "~/Desktop/pheno_file_5yr_colic_to_colic2_train.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  pheno_file_5yr_colic_to_colic2_test,
  "~/Desktop/pheno_file_5yr_colic_to_colic2_test.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  pheno_file_10yr_colic_to_colic2,
  "~/Desktop/pheno_file_10yr_colic_to_colic2_all.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  pheno_file_10yr_colic_to_colic2_train,
  "~/Desktop/pheno_file_10yr_colic_to_colic2_train.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  pheno_file_10yr_colic_to_colic2_test,
  "~/Desktop/pheno_file_10yr_colic_to_colic2_test.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

###############################################
### 15. Create >3 recurrences at any time symptomatic episodes only file

age_IID_pre <-
  gp_cases_colic_reintervention_initial_and_subsequent_redone %>% left_join(diet,
                                                                            by = c("participant_id" = "participant_id")) %>% subset(select = c(participant_id,
                                                                                                                                               dob,
                                                                                                                                               time_0))

age_IID_pre <- age_IID_pre %>% left_join(age_IID,
                                         by = c("participant_id" = "participant_id"))

age_IID2 <-
  age_IID_pre %>% mutate(age_at_first_stone = (time_0 - dob) / 365,
                         .keep = "unused")
age_IID2$sex <- as.integer(age_IID2$sex)
age_IID2$age_at_first_stone <-
  as.numeric(age_IID2$age_at_first_stone) %>% round()

age_IID2 <- age_IID2 %>% subset(select = -age_at_recruitment)

colic_to_colic_3_recurrences <-
  gp_cases_colic_reintervention_initial_and_subsequent_redone %>%
  select(participant_id,
         pheno_3) %>% rename(IID = participant_id,
                             pheno = pheno_3) %>% drop_na(pheno)

colic_to_colic_3_recurrences$pheno <-
  as.factor(colic_to_colic_3_recurrences$pheno)

colic_to_colic_3_recurrences$pheno <-
  recode_factor(colic_to_colic_3_recurrences$pheno,
                "ssf" = "no",
                "rsf" = "yes")  %>% as.integer()
colic_to_colic_3_recurrences <- colic_to_colic_3_recurrences %>%
  mutate(pheno = ifelse(pheno == 1,
                        0,
                        ifelse(pheno == 2,
                               1,
                               pheno)))



colic_to_colic_3_recurrences2 <- merge(
  colic_to_colic_3_recurrences,
  genotype_for_gwas,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

colic_to_colic_3_recurrences2 <- merge(
  colic_to_colic_3_recurrences2,
  age_IID2,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

colic_to_colic_3_recurrences2 <-
  colic_to_colic_3_recurrences2 %>% subset(missingness < 0.02)

colic_to_colic_3_recurrences2 <-
  colic_to_colic_3_recurrences2 %>% mutate(FID = IID,
                                       sex = genetic_sex,
                                       .keep = "all")

colic_to_colic_3_recurrences2 <-
  colic_to_colic_3_recurrences2 %>% select(FID,
                                       IID,
                                       everything()) %>% subset(select = -c(
                                         genotype_measurement_plate,
                                         genotype_measurement_well,
                                         genetic_sex
                                       ))

colic_to_colic_3_recurrences2_sample <-
  sample(1:nrow(na.omit(colic_to_colic_3_recurrences2)),
         size = nrow(na.omit(colic_to_colic_3_recurrences2)) * 0.8)

colic_to_colic_3_recurrences2_train <-
  na.omit(colic_to_colic_3_recurrences2)[colic_to_colic_3_recurrences2_sample, ]
colic_to_colic_3_recurrences2_test <-
  na.omit(colic_to_colic_3_recurrences2)[-colic_to_colic_3_recurrences2_sample, ]

write.table(
  colic_to_colic_3_recurrences2,
  "~/Desktop/colic_to_colic_3_recurrences_lessthan2yrs.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  colic_to_colic_3_recurrences2_train,
  "~/Desktop/colic_to_colic_3_recurrences2_lessthan2yrs_train.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  colic_to_colic_3_recurrences2_test,
  "~/Desktop/colic_to_colic_3_recurrences2_lessthan2yrs_test.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

################################
# Split into pheno and covariate files for Plink GWAS

colic_to_colic_3_recurrences2_pheno <- colic_to_colic_3_recurrences2 %>% subset(select = c(FID,
                                                                                           IID,
                                                                                           pheno))

colic_to_colic_3_recurrences2_cov <- colic_to_colic_3_recurrences2 %>% subset(select = -pheno)

write.table(
  colic_to_colic_3_recurrences2_pheno,
  "~/Desktop/colic_to_colic_3_recurrences2_lessthan2yrs_pheno.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  colic_to_colic_3_recurrences2_cov,
  "~/Desktop/colic_to_colic_3_recurrences2_lessthan2yrs_cov.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)


###############################################
### 16. Create time to event symptomatic episodes only (intervention/colic to intervention/colic >6 months apart) pheno file

colic_to_colic_time_to_event <- gp_cases_colic_reintervention_initial_and_subsequent %>%
    select(
      participant_id,
      pheno,
      time_to_recurrence_1
  ) %>% rename(IID = participant_id, 
               pheno = pheno,
               time_to_event = time_to_recurrence_1) %>% drop_na(pheno)

colic_to_colic_time_to_event$pheno <-
  as.factor(colic_to_colic_time_to_event$pheno)

colic_to_colic_time_to_event$pheno <-
  recode_factor(colic_to_colic_time_to_event$pheno,
                "ssf" = 0,
                "rsf" = 1)  %>% as.integer()
colic_to_colic_time_to_event <- colic_to_colic_time_to_event %>%
  mutate(pheno = ifelse(pheno == 1,
                        0,
                        ifelse(pheno == 2,
                               1,
                               pheno)))



colic_to_colic_time_to_event2 <- merge(
  colic_to_colic_time_to_event,
  genotype_for_gwas,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

colic_to_colic_time_to_event2 <- merge(
  colic_to_colic_time_to_event2,
  age_IID2,
  by.x = "IID",
  by.y = "participant_id",
  all.x = TRUE
)

colic_to_colic_time_to_event2 <-
  colic_to_colic_time_to_event2 %>% subset(missingness < 0.02)

colic_to_colic_time_to_event2 <-
  colic_to_colic_time_to_event2 %>% mutate(FID = IID,
                                       sex = genetic_sex,
                                       .keep = "all")

colic_to_colic_time_to_event2 <-
  colic_to_colic_time_to_event2 %>% select(FID,
                                       IID,
                                       everything()) %>% subset(select = -c(
                                         genotype_measurement_plate,
                                         genotype_measurement_well,
                                         genetic_sex
                                       ))

colic_to_colic_time_to_event2_sample <-
  sample(1:nrow(na.omit(colic_to_colic_time_to_event2)),
         size = nrow(na.omit(colic_to_colic_time_to_event2)) * 0.8)

colic_to_colic_time_to_event2_train <-
  na.omit(colic_to_colic_time_to_event2)[colic_to_colic_time_to_event2_sample, ]
colic_to_colic_time_to_event2_test <-
  na.omit(colic_to_colic_time_to_event2)[-colic_to_colic_time_to_event2_sample, ]

write.table(
  colic_to_colic_time_to_event2,
  "~/Desktop/colic_to_colic_time_to_event2.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  colic_to_colic_time_to_event2_train,
  "~/Desktop/colic_to_colic_time_to_event2_train.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)

write.table(
  colic_to_colic_time_to_event2_test,
  "~/Desktop/colic_to_colic_time_to_event2_test.txt", 
  sep ="\t",
  row.names = FALSE,
  quote = FALSE
)
